# app.py

from flask import Flask, request, jsonify
import joblib
import os
from werkzeug.utils import secure_filename
from PIL import Image
import numpy as np
import random
from datetime import datetime, timedelta

app = Flask(__name__)

# --- KNOWLEDGE BASES (FULLY MULTILINGUAL) ---
CROP_ACTION_PLANS = {
    'en': {"rice": {"üåæ Land Preparation": ["Plow 2-3 times and level it."], "üå± Seed & Sowing": ["Use high-yield varieties."], "üíß Irrigation": ["Maintain 2-5 cm water level."], "üêû Pest Control": ["Monitor for stem borer."]}, "maize": {"üåæ Land Preparation": ["Deep plow the land."], "üå± Seed & Sowing": ["Use a hybrid variety."], "üíß Irrigation": ["Water at critical stages."], "üêû Pest Control": ["Watch for fall armyworm."]}},
    'kn': {"rice": {"üåæ ‡≤≠‡≥Ç‡≤Æ‡≤ø ‡≤∏‡≤ø‡≤¶‡≥ç‡≤ß‡≤§‡≥Ü": ["‡≤≠‡≥Ç‡≤Æ‡≤ø‡≤Ø‡≤®‡≥ç‡≤®‡≥Å 2-3 ‡≤¨‡≤æ‡≤∞‡≤ø ‡≤â‡≤≥‡≥Å‡≤Æ‡≥Ü ‡≤Æ‡≤æ‡≤°‡≤ø."]}, "maize": {"üåæ ‡≤≠‡≥Ç‡≤Æ‡≤ø ‡≤∏‡≤ø‡≤¶‡≥ç‡≤ß‡≤§‡≥Ü": ["‡≤Ü‡≤≥‡≤µ‡≤æ‡≤ó‡≤ø ‡≤â‡≤≥‡≥Å‡≤Æ‡≥Ü ‡≤Æ‡≤æ‡≤°‡≤ø."]}},
    'hi': {"rice": {"üåæ ‡§ñ‡•á‡§§ ‡§ï‡•Ä ‡§§‡•à‡§Ø‡§æ‡§∞‡•Ä": ["‡§ñ‡•á‡§§ ‡§ï‡•ã 2-3 ‡§¨‡§æ‡§∞ ‡§ú‡•ã‡§§‡•á‡§Ç‡•§"]}, "maize": {"üåæ ‡§ñ‡•á‡§§ ‡§ï‡•Ä ‡§§‡•à‡§Ø‡§æ‡§∞‡•Ä": ["‡§ó‡§π‡§∞‡•Ä ‡§ú‡•Å‡§§‡§æ‡§à ‡§ï‡§∞‡•á‡§Ç‡•§"]}}
}
CROP_DATA = {"rice": {"yield_per_acre": 22, "market_price_per_quintal": 2050}, "maize": {"yield_per_acre": 25, "market_price_per_quintal": 2100}, "pigeonpeas": {"yield_per_acre": 8, "market_price_per_quintal": 6500}, "coffee": {"yield_per_acre": 4, "market_price_per_quintal": 15000}}
THREAT_DATABASE = {
    'en': {"fall_armyworm": {"type": "Pest", "solution": "Use pheromone traps."}, "leaf_blight": {"type": "Disease", "solution": "Apply a copper-based fungicide."}, "amaranthus_viridis": {"type": "Weed", "solution": "Manual removal is effective."}},
    'kn': {"fall_armyworm": {"type": "‡≤ï‡≥Ä‡≤ü", "solution": "‡≤´‡≥Ü‡≤∞‡≥ã‡≤Æ‡≥ã‡≤®‡≥ç ‡≤¨‡≤≤‡≥Ü‡≤ó‡≤≥‡≤®‡≥ç‡≤®‡≥Å ‡≤¨‡≤≥‡≤∏‡≤ø."}, "leaf_blight": {"type": "‡≤∞‡≥ã‡≤ó", "solution": "‡≤§‡≤æ‡≤Æ‡≥ç‡≤∞ ‡≤Ü‡≤ß‡≤æ‡≤∞‡≤ø‡≤§ ‡≤∂‡≤ø‡≤≤‡≥Ä‡≤Ç‡≤ß‡≥ç‡≤∞‡≤®‡≤æ‡≤∂‡≤ï‡≤µ‡≤®‡≥ç‡≤®‡≥Å ‡≤¨‡≤≥‡≤∏‡≤ø."}, "amaranthus_viridis": {"type": "‡≤ï‡≤≥‡≥Ü", "solution": "‡≤ï‡≥à‡≤Ø‡≤ø‡≤Ç‡≤¶ ‡≤§‡≥Ü‡≤ó‡≥Ü‡≤Ø‡≥Å‡≤µ‡≥Å‡≤¶‡≥Å ‡≤™‡≤∞‡≤ø‡≤£‡≤æ‡≤Æ‡≤ï‡≤æ‡≤∞‡≤ø."}},
    'hi': {"fall_armyworm": {"type": "‡§ï‡•Ä‡§ü", "solution": "‡§´‡•á‡§∞‡•ã‡§Æ‡•ã‡§® ‡§ü‡•ç‡§∞‡•à‡§™ ‡§ï‡§æ ‡§™‡•ç‡§∞‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç‡•§"}, "leaf_blight": {"type": "‡§∞‡•ã‡§ó", "solution": "‡§§‡§æ‡§Ç‡§¨‡§æ ‡§Ü‡§ß‡§æ‡§∞‡§ø‡§§ ‡§ï‡§µ‡§ï‡§®‡§æ‡§∂‡•Ä ‡§ï‡§æ ‡§™‡•ç‡§∞‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç‡•§"}, "amaranthus_viridis": {"type": "‡§ñ‡§∞‡§™‡§§‡§µ‡§æ‡§∞", "solution": "‡§π‡§æ‡§• ‡§∏‡•á ‡§®‡§ø‡§ï‡§æ‡§≤‡§®‡§æ ‡§™‡•ç‡§∞‡§≠‡§æ‡§µ‡•Ä ‡§π‡•à‡•§"}}
}
CROP_MATURITY_DATA = {"rice": 120, "maize": 100, "pigeonpeas": 180, "coffee": 1500}

# --- SETUP ---
crop_model = joblib.load('models/crop_model.pkl')
UPLOAD_FOLDER = 'uploads'
if not os.path.exists(UPLOAD_FOLDER): os.makedirs(UPLOAD_FOLDER)
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER

# --- API ENDPOINTS ---

@app.route('/predict_crop', methods=['POST'])
def predict_crop():
    data = request.get_json(force=True)
    lang = data.get('lang', 'en')
    features = [data['N'], data['P'], data['K'], data['temperature'], data['humidity'], data['ph'], data['rainfall']]
    prediction_result = crop_model.predict([features])[0]
    action_plan = CROP_ACTION_PLANS.get(lang, {}).get(prediction_result.lower(), {})
    n_diff = 90 - data['N']
    rec_urea = 50 + (n_diff / 10) * 5
    fert_advice_templates = {
        'en': f"- Your soil is {'low' if n_diff > 0 else 'high'} in Nitrogen. We recommend applying **{rec_urea:.1f} kg of Urea**.",
        'kn': f"- ‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤Æ‡≤£‡≥ç‡≤£‡≤ø‡≤®‡≤≤‡≥ç‡≤≤‡≤ø ‡≤∏‡≤æ‡≤∞‡≤ú‡≤®‡≤ï {'‡≤ï‡≤°‡≤ø‡≤Æ‡≥Ü' if n_diff > 0 else '‡≤π‡≥Ü‡≤ö‡≥ç‡≤ö‡≥Å'} ‡≤á‡≤¶‡≥Ü. ‡≤®‡≤æ‡≤µ‡≥Å **{rec_urea:.1f} ‡≤ï‡≥Ü‡≤ú‡≤ø ‡≤Ø‡≥Ç‡≤∞‡≤ø‡≤Ø‡≤æ** ‡≤¨‡≤≥‡≤∏‡≤≤‡≥Å ‡≤∂‡≤ø‡≤´‡≤æ‡≤∞‡≤∏‡≥Å ‡≤Æ‡≤æ‡≤°‡≥Å‡≤§‡≥ç‡≤§‡≥á‡≤µ‡≥Ü.",
        'hi': f"- ‡§Ü‡§™‡§ï‡•Ä ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§Æ‡•á‡§Ç ‡§®‡§æ‡§á‡§ü‡•ç‡§∞‡•ã‡§ú‡§® {'‡§ï‡§Æ' if n_diff > 0 else '‡§Ö‡§ß‡§ø‡§ï'} ‡§π‡•à‡•§ ‡§π‡§Æ **{rec_urea:.1f} ‡§ï‡§ø‡§≤‡•ã‡§ó‡•ç‡§∞‡§æ‡§Æ ‡§Ø‡•Ç‡§∞‡§ø‡§Ø‡§æ** ‡§°‡§æ‡§≤‡§®‡•á ‡§ï‡•Ä ‡§∏‡§≤‡§æ‡§π ‡§¶‡•á‡§§‡•á ‡§π‡•à‡§Ç‡•§"
    }
    action_plan["üåø Personalized Fertilizer Plan"] = [fert_advice_templates[lang]]
    return jsonify({'recommended_crop': prediction_result, 'action_plan': action_plan})

@app.route('/analyze_soil_image', methods=['POST'])
def analyze_soil_image_endpoint():
    if 'file' not in request.files: return jsonify({'error': 'No file part'}), 400
    file = request.files['file']
    if file.filename == '': return jsonify({'error': 'No selected file'}), 400
    if file:
        filename = secure_filename(file.filename)
        filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)
        file.save(filepath)
        try:
            with Image.open(filepath) as img:
                avg_color = np.array(img.convert('RGB')).mean(axis=(0, 1))
                brightness = sum(avg_color) / 3
                if brightness < 80: soil_type, organic_matter = "Clay Loam", "High"
                elif brightness < 140: soil_type, organic_matter = "Loamy Soil", "Moderate"
                else: soil_type, organic_matter = "Sandy Soil", "Low"
                return jsonify({"soil_type": soil_type, "organic_matter_estimate": organic_matter})
        except Exception as e: return jsonify({"error": str(e)})

@app.route('/diagnose_threat', methods=['POST'])
def diagnose_threat():
    if 'file' not in request.files: return jsonify({'error': 'No file part'}), 400
    file = request.files['file']
    lang = request.form.get('lang', 'en')
    if file.filename == '': return jsonify({'error': 'No selected file'}), 400
    if file:
        threats = ["fall_armyworm", "leaf_blight", "amaranthus_viridis"]
        identified_threat_key = random.choice(threats)
        threat_info = THREAT_DATABASE.get(lang, {}).get(identified_threat_key, {"type": "Unknown", "solution": "No solution found."})
        return jsonify({'threat_name': identified_threat_key.replace('_', ' ').title(), 'threat_type': threat_info['type'], 'recommended_action': threat_info['solution']})

@app.route('/calculate_profitability', methods=['POST'])
def calculate_profitability():
    data = request.get_json(force=True)
    crop_name = data.get('crop', '').lower()
    crop_info = CROP_DATA.get(crop_name)

    if not crop_info:
        return jsonify({'error': 'Data not found for this crop.'})
    
    y = crop_info['yield_per_acre']
    p = crop_info['market_price_per_quintal']
    
    return jsonify({
        'yield_forecast': f"{y} Q/Acre", 
        'market_price': f"‚Çπ{p:,}/Q", 
        'estimated_revenue': f"‚Çπ{y*p:,.2f}/Acre"
    })

@app.route('/get_watering_advice', methods=['POST'])
def get_watering_advice():
    data = request.get_json(force=True); soil_type, lang = data.get('soil_type', 'Loamy Soil'), data.get('lang', 'en')
    conditions, temp, humidity = ["Sunny", "Cloudy", "Light Haze", "Chance of Rain"], round(random.uniform(24.0, 32.0), 1), random.randint(55, 85)
    weather = {"temp": temp, "humidity": humidity, "forecast": random.choice(conditions)}
    advice_key = 'default'
    if "Rain" in weather['forecast']: advice_key = 'rain_expected'
    elif "Sandy" in soil_type and temp > 28: advice_key = 'sandy_hot'
    elif "Clay" in soil_type and temp < 26: advice_key = 'clay_cool'
    elif temp > 30: advice_key = 'hot_day'
    advice_templates = {
        'en': {'rain_expected': "NO watering needed. Rain is expected.", 'sandy_hot': "HIGH watering needed (45-60 mins).", 'clay_cool': "LOW watering needed (15-20 mins).", 'hot_day': "MODERATE watering needed (30-40 mins).", 'default': "NORMAL watering needed (25-30 mins)."},
        'kn': {'rain_expected': "‡≤®‡≥Ä‡≤∞‡≥Å‡≤£‡≤ø‡≤∏‡≥Å‡≤µ ‡≤Ö‡≤ó‡≤§‡≥ç‡≤Ø‡≤µ‡≤ø‡≤≤‡≥ç‡≤≤. ‡≤Æ‡≤≥‡≥Ü ‡≤®‡≤ø‡≤∞‡≥Ä‡≤ï‡≥ç‡≤∑‡≤ø‡≤§‡≤µ‡≤æ‡≤ó‡≤ø‡≤¶‡≥Ü.", 'sandy_hot': "‡≤π‡≥Ü‡≤ö‡≥ç‡≤ö‡≥Å ‡≤®‡≥Ä‡≤∞‡≥Å‡≤£‡≤ø‡≤∏‡≤ø (45-60 ‡≤®‡≤ø‡≤Æ‡≤ø‡≤∑).", 'clay_cool': "‡≤ï‡≤°‡≤ø‡≤Æ‡≥Ü ‡≤®‡≥Ä‡≤∞‡≥Å‡≤£‡≤ø‡≤∏‡≤ø (15-20 ‡≤®‡≤ø‡≤Æ‡≤ø‡≤∑).", 'hot_day': "‡≤Æ‡≤ß‡≥ç‡≤Ø‡≤Æ ‡≤®‡≥Ä‡≤∞‡≥Å‡≤£‡≤ø‡≤∏‡≤ø (30-40 ‡≤®‡≤ø‡≤Æ‡≤ø‡≤∑).", 'default': "‡≤∏‡≤æ‡≤Æ‡≤æ‡≤®‡≥ç‡≤Ø ‡≤®‡≥Ä‡≤∞‡≥Å‡≤£‡≤ø‡≤∏‡≤ø (25-30 ‡≤®‡≤ø‡≤Æ‡≤ø‡≤∑)."},
        'hi': {'rain_expected': "‡§™‡§æ‡§®‡•Ä ‡§¶‡•á‡§®‡•á ‡§ï‡•Ä ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï‡§§‡§æ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡•§ ‡§¨‡§æ‡§∞‡§ø‡§∂ ‡§ï‡•Ä ‡§â‡§Æ‡•ç‡§Æ‡•Ä‡§¶ ‡§π‡•à‡•§", 'sandy_hot': "‡§Ö‡§ß‡§ø‡§ï ‡§™‡§æ‡§®‡•Ä ‡§¶‡•á‡§Ç (45-60 ‡§Æ‡§ø‡§®‡§ü)‡•§", 'clay_cool': "‡§ï‡§Æ ‡§™‡§æ‡§®‡•Ä ‡§¶‡•á‡§Ç (15-20 ‡§Æ‡§ø‡§®‡§ü)‡•§", 'hot_day': "‡§Æ‡§ß‡•ç‡§Ø‡§Æ ‡§™‡§æ‡§®‡•Ä ‡§¶‡•á‡§Ç (30-40 ‡§Æ‡§ø‡§®‡§ü)‡•§", 'default': "‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§™‡§æ‡§®‡•Ä ‡§¶‡•á‡§Ç (25-30 ‡§Æ‡§ø‡§®‡§ü)‡•§"}
    }
    return jsonify({'weather': weather, 'advice': advice_templates[lang][advice_key]})

@app.route('/get_harvest_advice', methods=['POST'])
def get_harvest_advice():
    data = request.get_json(force=True); crop_name, sowing_date_str, lang = data.get('crop'), data.get('sowing_date'), data.get('lang', 'en')
    maturity_days = CROP_MATURITY_DATA.get(crop_name.lower())
    if not maturity_days: return jsonify({'error': 'Maturity data not found.'})
    sowing_date = datetime.strptime(sowing_date_str, '%Y-%m-%d'); harvest_date = sowing_date + timedelta(days=maturity_days)
    weather, market = random.choice(["Clear Skies", "Rain Forecast", "Stable"]), random.choice(["Trending Up", "Stable", "Trending Down"])
    advice_key = 'default'
    if "Rain" in weather: advice_key = 'urgent_harvest_rain'
    elif "Up" in market and "Clear" in weather: advice_key = 'hold_harvest_market_up'
    elif "Down" in market: advice_key = 'harvest_now_market_down'
    advice_templates = {
        'en': {'urgent_harvest_rain': "URGENT HARVEST. Harvest within 3 days.", 'hold_harvest_market_up': "HOLD HARVEST. Wait for 5-7 days.", 'harvest_now_market_down': "HARVEST NOW. Sell immediately.", 'default': "HARVEST SOON. Plan to harvest in 7-10 days."},
        'kn': {'urgent_harvest_rain': "‡≤§‡≥Å‡≤∞‡≥ç‡≤§‡≥Å ‡≤ï‡≥ä‡≤Ø‡≥ç‡≤≤‡≥Å. 3 ‡≤¶‡≤ø‡≤®‡≤ó‡≤≥‡≤≤‡≥ç‡≤≤‡≤ø ‡≤ï‡≥ä‡≤Ø‡≥ç‡≤≤‡≥Å ‡≤Æ‡≤æ‡≤°‡≤ø.", 'hold_harvest_market_up': "‡≤ï‡≥ä‡≤Ø‡≥ç‡≤≤‡≥Å ‡≤§‡≤°‡≥Ü‡≤π‡≤ø‡≤°‡≤ø‡≤Ø‡≤ø‡≤∞‡≤ø. 5-7 ‡≤¶‡≤ø‡≤® ‡≤ï‡≤æ‡≤Ø‡≤ø‡≤∞‡≤ø.", 'harvest_now_market_down': "‡≤à‡≤ó‡≤≤‡≥á ‡≤ï‡≥ä‡≤Ø‡≥ç‡≤≤‡≥Å ‡≤Æ‡≤æ‡≤°‡≤ø. ‡≤§‡≤ï‡≥ç‡≤∑‡≤£ ‡≤Æ‡≤æ‡≤∞‡≤æ‡≤ü ‡≤Æ‡≤æ‡≤°‡≤ø.", 'default': "‡≤∂‡≥Ä‡≤ò‡≥ç‡≤∞‡≤¶‡≤≤‡≥ç‡≤≤‡≥á ‡≤ï‡≥ä‡≤Ø‡≥ç‡≤≤‡≥Å ‡≤Æ‡≤æ‡≤°‡≤ø."},
        'hi': {'urgent_harvest_rain': "‡§§‡§§‡•ç‡§ï‡§æ‡§≤ ‡§ï‡§ü‡§æ‡§à ‡§ï‡§∞‡•á‡§Ç‡•§ 3 ‡§¶‡§ø‡§®‡•ã‡§Ç ‡§ï‡•á ‡§≠‡•Ä‡§§‡§∞ ‡§ï‡§ü‡§æ‡§à ‡§ï‡§∞‡•á‡§Ç‡•§", 'hold_harvest_market_up': "‡§ï‡§ü‡§æ‡§à ‡§∞‡•ã‡§ï‡•á‡§Ç‡•§ 5-7 ‡§¶‡§ø‡§® ‡§™‡•ç‡§∞‡§§‡•Ä‡§ï‡•ç‡§∑‡§æ ‡§ï‡§∞‡•á‡§Ç‡•§", 'harvest_now_market_down': "‡§Ö‡§≠‡•Ä ‡§ï‡§ü‡§æ‡§à ‡§ï‡§∞‡•á‡§Ç‡•§ ‡§§‡•Å‡§∞‡§Ç‡§§ ‡§¨‡•á‡§ö‡•á‡§Ç‡•§", 'default': "‡§ú‡§≤‡•ç‡§¶ ‡§π‡•Ä ‡§ï‡§ü‡§æ‡§à ‡§ï‡§∞‡•á‡§Ç‡•§"}
    }
    return jsonify({"harvest_date_estimate": harvest_date.strftime('%B %d, %Y'), "weather_outlook": weather, "market_trend": market, "advice": advice_templates[lang][advice_key]})

@app.route('/simulate_sms', methods=['POST'])
def simulate_sms():
    data = request.get_json(force=True); lang, crop, phone = data.get('lang', 'en'), data.get('crop', 'Unknown'), data.get('phone_number', 'farmer')
    sms_templates = {
        'en': f"SmartAgro AI Alert for +91-{phone}: Best crop is **{crop}**. Visit your local kiosk for a detailed plan.",
        'kn': f"+91-{phone} ‡≤∏‡≤Ç‡≤ñ‡≥ç‡≤Ø‡≥Ü‡≤ó‡≥Ü ‡≤∏‡≥ç‡≤Æ‡≤æ‡≤∞‡≥ç‡≤ü‡≥ç ‡≤Ü‡≤ó‡≥ç‡≤∞‡≥ã AI ‡≤∏‡≤Ç‡≤¶‡≥á‡≤∂: ‡≤â‡≤§‡≥ç‡≤§‡≤Æ ‡≤¨‡≥Ü‡≤≥‡≥Ü **{crop}**. ‡≤µ‡≤ø‡≤µ‡≤∞‡≤µ‡≤æ‡≤¶ ‡≤Ø‡≥ã‡≤ú‡≤®‡≥Ü‡≤ó‡≤æ‡≤ó‡≤ø ‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤∏‡≥ç‡≤•‡≤≥‡≥Ä‡≤Ø ‡≤ï‡≥á‡≤Ç‡≤¶‡≥ç‡≤∞‡≤ï‡≥ç‡≤ï‡≥Ü ‡≤≠‡≥á‡≤ü‡≤ø ‡≤®‡≥Ä‡≤°‡≤ø.",
        'hi': f"+91-{phone} ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡•ç‡§Æ‡§æ‡§∞‡•ç‡§ü ‡§è‡§ó‡•ç‡§∞‡•ã AI ‡§Ö‡§≤‡§∞‡•ç‡§ü: ‡§∏‡§¨‡§∏‡•á ‡§Ö‡§ö‡•ç‡§õ‡•Ä ‡§´‡§∏‡§≤ **{crop}** ‡§π‡•à‡•§ ‡§µ‡§ø‡§∏‡•ç‡§§‡•É‡§§ ‡§Ø‡•ã‡§ú‡§®‡§æ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ö‡§™‡§®‡•á ‡§∏‡•ç‡§•‡§æ‡§®‡•Ä‡§Ø ‡§ï‡§ø‡§Ø‡•ã‡§∏‡•ç‡§ï ‡§™‡§∞ ‡§ú‡§æ‡§è‡§Å‡•§"
    }
    return jsonify({'sms_message': sms_templates.get(lang, sms_templates['en'])})

if __name__ == '__main__':
    app.run(debug=True, port=5000)

